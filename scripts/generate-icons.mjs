#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PNG –∏–∫–æ–Ω–æ–∫ –∏–∑ SVG –¥–ª—è Chrome —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ sharp: pnpm install --save-dev sharp
 * 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/generate-icons.mjs
 * 
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –±–µ–∑ sharp:
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã –∏–ª–∏ ImageMagick/Inkscape (—Å–º. public/icons/README.md)
 */

import fs from 'fs';
import path from 'path';
import url from 'url';

const __dirname = path.dirname(url.fileURLToPath(import.meta.url));
const root = path.resolve(__dirname, '..');
const iconsDir = path.join(root, 'public/icons');
const svgPath = path.join(iconsDir, 'icon.svg');

const sizes = [16, 48, 128];

async function generateIcons() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SVG —Ñ–∞–π–ª–∞
  if (!fs.existsSync(svgPath)) {
    console.error('‚ùå –§–∞–π–ª icon.svg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ public/icons/');
    console.error('–°–æ–∑–¥–∞–π—Ç–µ SVG –∏–∫–æ–Ω–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é');
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ sharp
  let sharp;
  try {
    sharp = (await import('sharp')).default;
  } catch (error) {
    console.error('‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ sharp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    console.error('');
    console.error('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π:');
    console.error('  pnpm install --save-dev sharp');
    console.error('');
    console.error('–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:');
    console.error('  - –û–Ω–ª–∞–π–Ω –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã (cloudconvert.com, convertio.co)');
    console.error('  - ImageMagick: brew install imagemagick');
    console.error('  - Inkscape: brew install inkscape');
    console.error('');
    console.error('–°–º. public/icons/README.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π');
    process.exit(1);
  }

  console.log('üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫...');
  
  const svgBuffer = fs.readFileSync(svgPath);

  for (const size of sizes) {
    const outputPath = path.join(iconsDir, `icon-${size}.png`);
    
    try {
      await sharp(svgBuffer)
        .resize(size, size)
        .png()
        .toFile(outputPath);
      
      console.log(`‚úì –°–æ–∑–¥–∞–Ω–∞ –∏–∫–æ–Ω–∫–∞ ${size}x${size}: icon-${size}.png`);
    } catch (error) {
      console.error(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏ ${size}x${size}:`, error.message);
      process.exit(1);
    }
  }

  console.log('');
  console.log('‚ú® –í—Å–µ –∏–∫–æ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
  console.log('');
  console.log('–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:');
  console.log('  pnpm run build');
}

generateIcons().catch(error => {
  console.error('–û—à–∏–±–∫–∞:', error);
  process.exit(1);
});
